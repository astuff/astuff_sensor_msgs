class update_delphi_srr_msgs_SrrStatus2_d6c9e5a365813e1b4a1c283a90194218(MessageUpdateRule):
	old_type = "delphi_srr_msgs/SrrStatus2"
	old_full_text = """
# Message file for srr_status2

Header header

uint8     CAN_TX_ALIGNMENT_STATUS                 
uint8         CAN_TX_ALIGNMENT_STATUS_Unknown=0
uint8         CAN_TX_ALIGNMENT_STATUS_Converged=1
uint8         CAN_TX_ALIGNMENT_STATUS_Failed=2
uint8         CAN_TX_ALIGNMENT_STATUS_Reserved=3

bool      CAN_TX_COMM_ERROR                       

bool      CAN_TX_STEERING_ANGLE_SIGN              

float32   CAN_TX_YAW_RATE_BIAS                    

float32   CAN_TX_VEH_SPD_COMP_FACTOR              

uint16    CAN_TX_SW_VERSION_DSP                   

int16     CAN_TX_TEMPERATURE                       # degC

bool      CAN_TX_RANGE_PERF_ERROR                 
bool          CAN_TX_RANGE_PERF_ERROR_Not_Blocked=0
bool          CAN_TX_RANGE_PERF_ERROR_Blocked=1

bool      CAN_TX_OVERHEAT_ERROR                   
bool          CAN_TX_OVERHEAT_ERROR_Not_OverTemp=0
bool          CAN_TX_OVERHEAT_ERROR_OverTemp=1

bool      CAN_TX_INTERNAL_ERROR                   
bool          CAN_TX_INTERNAL_ERROR_Not_Failed=0
bool          CAN_TX_INTERNAL_ERROR_Failed=1

bool      CAN_TX_XCVR_OPERATIONAL                 
bool          CAN_TX_XCVR_OPERATIONAL_Off=0
bool          CAN_TX_XCVR_OPERATIONAL_On=1

uint16    CAN_TX_STEERING_ANGLE                    # deg

uint8     CAN_TX_ROLLING_COUNT_2                  


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""

	new_type = "delphi_srr_msgs/SrrStatus2"
	new_full_text = """
# Message file for srr_status2

std_msgs/Header header

uint8     can_tx_alignment_status
uint8     CAN_TX_ALIGNMENT_STATUS_UNKNOWN=0
uint8     CAN_TX_ALIGNMENT_STATUS_CONVERGED=1
uint8     CAN_TX_ALIGNMENT_STATUS_FAILED=2
uint8     CAN_TX_ALIGNMENT_STATUS_RESERVED=3

bool      can_tx_comm_error
bool      can_tx_steering_angle_sign
float32   can_tx_yaw_rate_bias
float32   can_tx_veh_spd_comp_factor
uint16    can_tx_sw_version_dsp
int16     can_tx_temperature                       # degc
bool      can_tx_range_perf_error
bool      can_tx_overheat_error
bool      can_tx_internal_error
bool      can_tx_xcvr_operational
uint16    can_tx_steering_angle                    # deg
uint8     can_tx_rolling_count_2


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""

	order = 0
	migrated_types = [
		("Header","Header"),]

	valid = True

	def update(self, old_msg, new_msg):
		self.migrate(old_msg.header, new_msg.header)
		new_msg.can_tx_alignment_status = old_msg.CAN_TX_ALIGNMENT_STATUS
		new_msg.can_tx_comm_error = old_msg.CAN_TX_COMM_ERROR
		new_msg.can_tx_steering_angle_sign = old_msg.CAN_TX_STEERING_ANGLE_SIGN
		new_msg.can_tx_yaw_rate_bias = old_msg.CAN_TX_YAW_RATE_BIAS
		new_msg.can_tx_veh_spd_comp_factor = old_msg.CAN_TX_VEH_SPD_COMP_FACTOR
		new_msg.can_tx_sw_version_dsp = old_msg.CAN_TX_SW_VERSION_DSP
		new_msg.can_tx_temperature = old_msg.CAN_TX_TEMPERATURE
		new_msg.can_tx_range_perf_error = old_msg.CAN_TX_RANGE_PERF_ERROR
		new_msg.can_tx_overheat_error = old_msg.CAN_TX_OVERHEAT_ERROR
		new_msg.can_tx_internal_error = old_msg.CAN_TX_INTERNAL_ERROR
		new_msg.can_tx_xcvr_operational = old_msg.CAN_TX_XCVR_OPERATIONAL
		new_msg.can_tx_steering_angle = old_msg.CAN_TX_STEERING_ANGLE
		new_msg.can_tx_rolling_count_2 = old_msg.CAN_TX_ROLLING_COUNT_2
